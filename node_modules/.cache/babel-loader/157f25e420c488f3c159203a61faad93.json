{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YS\\\\Desktop\\\\\\uB514\\uCF54\\uB4DC \\uCEF4\\uD4E8\\uD130\\uD559\\uC6D0\\\\221013 17\\uC77C\\uCC28\\\\layout_react\\\\src\\\\components\\\\common\\\\Popup.js\",\n  _s = $RefreshSig$();\nimport { forwardRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Popup = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n  const [Open, setOpen] = useState(false);\n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"aside\", {\n    className: \"pop\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"con\",\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"close\",\n      onClick: () => {\n        props.setOpen(false);\n      },\n      children: \"close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}, \"kbiQDcoq6AwGfzJ6OJC+vmj9LGU=\")), \"kbiQDcoq6AwGfzJ6OJC+vmj9LGU=\");\n_c2 = Popup;\nexport default Popup;\n\n/*\r\n\r\nforwardRef\r\n단계1 - 기존의 컴포넌트 함수를 popup이라는 컴포넌트 함수를 대입형(선언형을 대입형으로 전환해줘야한다.)\r\n\r\n단계2 - 해당 화살표 함수를 forwordRef로 감싸고 인수로 전달한다. \r\n\r\n*/\nvar _c, _c2;\n$RefreshReg$(_c, \"Popup$forwardRef\");\n$RefreshReg$(_c2, \"Popup\");","map":{"version":3,"names":["forwardRef","useEffect","Popup","props","ref","Open","setOpen","useState","document","body","style","overflow","children"],"sources":["C:/Users/YS/Desktop/디코드 컴퓨터학원/221013 17일차/layout_react/src/components/common/Popup.js"],"sourcesContent":["import { forwardRef, useEffect } from \"react\";\r\n\r\nconst Popup = forwardRef((props, ref) => {\r\n\r\n  const [Open, setOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    document.body.style.overflow = 'hidden';\r\n    return() => {\r\n      document.body.style.overflow = 'auto';\r\n    }\r\n  }, []);\r\n  \r\n  return(\r\n    <aside className=\"pop\">\r\n      <div className=\"con\">{props.children}</div>\r\n      <span className=\"close\" onClick={() => { props.setOpen(false) }}>close</span>\r\n    </aside>\r\n  );\r\n});\r\n\r\n\r\nexport default Popup;\r\n\r\n/*\r\n\r\nforwardRef\r\n단계1 - 기존의 컴포넌트 함수를 popup이라는 컴포넌트 함수를 대입형(선언형을 대입형으로 전환해줘야한다.)\r\n\r\n단계2 - 해당 화살표 함수를 forwordRef로 감싸고 인수로 전달한다. \r\n\r\n*/"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAE9C,MAAMC,KAAK,iCAAGF,UAAU,SAAC,CAACG,KAAK,EAAEC,GAAG,KAAK;EAAA;EAEvC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAEvCN,SAAS,CAAC,MAAM;IACdO,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAG,QAAQ;IACvC,OAAM,MAAM;MACVH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAG,MAAM;IACvC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE;IAAO,SAAS,EAAC,KAAK;IAAA,wBACpB;MAAK,SAAS,EAAC,KAAK;MAAA,UAAER,KAAK,CAACS;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAO,eAC3C;MAAM,SAAS,EAAC,OAAO;MAAC,OAAO,EAAE,MAAM;QAAET,KAAK,CAACG,OAAO,CAAC,KAAK,CAAC;MAAC,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAa;EAAA;IAAA;IAAA;IAAA;EAAA,QACvE;AAEZ,CAAC,kCAAC;AAAC,MAjBGJ,KAAK;AAoBX,eAAeA,KAAK;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}