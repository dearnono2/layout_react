{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Users/YS/Desktop/\\uB514\\uCF54\\uB4DC \\uCEF4\\uD4E8\\uD130\\uD559\\uC6D0/221013 17\\uC77C\\uCC28/layout_react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"C:/Users/YS/Desktop/\\uB514\\uCF54\\uB4DC \\uCEF4\\uD4E8\\uD130\\uD559\\uC6D0/221013 17\\uC77C\\uCC28/layout_react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useEffect,useRef,useState}from\"react\";import Layout from\"../common/Layout\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Location(){var _window=window,kakao=_window.kakao;// 윈도우 객체에 등록되어 있는 카카오키를 변수명으로 비구조화할당을 한것.\n// 윈도우 객체가 카카오 객체를 사용할 수 있도록 하는 코드.\n// const kakao = (window).kakao;\nvar info=[{title:'삼성동 코엑스',latlng:new kakao.maps.LatLng(33.450701,126.570667),imgUrl:\"\".concat(process.env.PUBLIC_URL,\"/img/marker1.png\"),imgSize:new kakao.maps.Size(232,99),imgPos:{offset:new kakao.maps.Point(116,99)}},{title:'올림픽 공원',latlng:new kakao.maps.LatLng(37.5206868,127.1214941),imgUrl:\"\".concat(process.env.PUBLIC_URL,\"/img/marker2.png\"),imgSize:new kakao.maps.Size(232,99),imgPos:{offset:new kakao.maps.Point(116,99)}},{title:'서울 시청',latlng:new kakao.maps.LatLng(37.5657037,126.9768616),imgUrl:\"\".concat(process.env.PUBLIC_URL,\"/img/marker3.png\"),imgSize:new kakao.maps.Size(232,99),imgPos:{offset:new kakao.maps.Point(116,99)}}];// 리얼돔에서 참조하는 방법으로 querySelector 등의 방법은 가상돔인 리액트에서는 사용할 수 없다. 그래서 리액트에서는 useRef라는 훅을 이용해서 가상으로 생성된 DOM을 이용할 수 있다.\nvar container=useRef(null);// useRef를 이용해서 가상돔을 참조할 변수로 컨테이너를 생성한 뒤, null 값으로 빈 구역을 만들어둠.\nvar btns=useRef(null);var _useState=useState(null),_useState2=_slicedToArray(_useState,2),Location=_useState2[0],setLocation=_useState2[1];// useEffect에서 만들어진 지도 인스턴스를 담을 state를 생성하는 것\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),Traffic=_useState4[0],setTraffic=_useState4[1];// Traffic 토글 기능 구현을 위한 state를 추가, 불린값을 부여한다.\nvar _useState5=useState(info),_useState6=_slicedToArray(_useState5,1),Info=_useState6[0];// setInfo는 info가 바뀔 일이 없으므로 필요가 없다.\nvar _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),Index=_useState8[0],setIndex=_useState8[1];// 인덱스가 변화될 때 렌더링이 필요하므로 useState에 담아 관리한다.\nvar option={//지도를 생성할 때 필요한 기본 옵션\ncenter:Info[Index].latlng,//지도의 중심좌표.\nlevel:3//지도의 레벨(확대, 축소 정도)\n};var markerPosition=Info[Index].latlng;// 마커위치 인스턴스 생성\nvar imageSrc=Info[Index].imgUrl;var imageSize=Info[Index].imgSize;var imageOption=Info[Index].imgPos;// 마커 이미지 변경에 필요한 정보값 3개를 등록\nvar markerImage=new kakao.maps.MarkerImage(imageSrc,imageSize,imageOption);var marker=new kakao.maps.Marker({position:markerPosition,image:markerImage});// 위치 인스턴스 값을 인수로 전달해서 다시 마커 인스턴스 생성\nuseEffect(function(){container.current.innerHTML='';// 지도 인스턴스 최종생성\nvar map_instance=new kakao.maps.Map(container.current,option);//지도 인스턴스를 활용해서 마커를 생성하는 코드\nmarker.setMap(map_instance);setLocation(map_instance);var mapTypeControl=new kakao.maps.MapTypeControl();map_instance.addControl(mapTypeControl,kakao.maps.ControlPosition.TOPRIGHT);var zoomControl=new kakao.maps.ZoomControl();map_instance.addControl(zoomControl,kakao.maps.ControlPosition.RIGHT);var _iterator=_createForOfIteratorHelper(btns.current.children),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var btn=_step.value;btn.classList.remove('on');}}catch(err){_iterator.e(err);}finally{_iterator.f();}btns.current.children[Index].classList.add('on');window.addEventListener('resize',function(){map_instance.setCenter(Info[Index].latlng);});},[Index]);// <-- 기존 컴포넌트가 처음 마운트 되었을 때만 지도를 출력하던 방식에서, Index가 변경될 때 지도가 다시 렌더링 하는 방식으로 바꿈.\n// 트래픽 토글 전용 useEffect \nuseEffect(function(){if(!Location)return;// Location state의 값은 두번째 호출부터 값이 담겨 사이클이 돌아가므로 처음 값이 존재하지 않는 초기 오류방지를 위해 조건문 처리함.\n// 트레픽 값에 따라서 생성과 삭제로 나누어서 코드를 제공, 구현.\nTraffic?Location.addOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC):Location.removeOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC);},[Traffic]);// traffic state의 값이 변경될 때마다 실행이 되는 구문.\nreturn/*#__PURE__*/_jsxs(Layout,{name:'Location',children:[/*#__PURE__*/_jsx(\"div\",{id:\"map\",ref:container}),/*#__PURE__*/_jsxs(\"div\",{className:\"btnSet\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){setTraffic(!Traffic);},children:Traffic?'Traffic OFF':'Traffic ON'}),/*#__PURE__*/_jsx(\"ul\",{className:\"branch\",ref:btns,children:Info.map(function(el,idx){return/*#__PURE__*/_jsx(\"li\",{onClick:function onClick(){return setIndex(idx);},children:el.title},idx);})})]})]});}","map":{"version":3,"names":["useEffect","useRef","useState","Layout","Location","window","kakao","info","title","latlng","maps","LatLng","imgUrl","process","env","PUBLIC_URL","imgSize","Size","imgPos","offset","Point","container","btns","setLocation","Traffic","setTraffic","Info","Index","setIndex","option","center","level","markerPosition","imageSrc","imageSize","imageOption","markerImage","MarkerImage","marker","Marker","position","image","current","innerHTML","map_instance","Map","setMap","mapTypeControl","MapTypeControl","addControl","ControlPosition","TOPRIGHT","zoomControl","ZoomControl","RIGHT","children","btn","classList","remove","add","addEventListener","setCenter","addOverlayMapTypeId","MapTypeId","TRAFFIC","removeOverlayMapTypeId","map","el","idx"],"sources":["C:/Users/YS/Desktop/디코드 컴퓨터학원/221013 17일차/layout_react/src/components/sub/Location.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport Layout from \"../common/Layout\"\r\n\r\nexport default function Location() {\r\n\r\n  const { kakao } = window;\r\n  // 윈도우 객체에 등록되어 있는 카카오키를 변수명으로 비구조화할당을 한것.\r\n  // 윈도우 객체가 카카오 객체를 사용할 수 있도록 하는 코드.\r\n  // const kakao = (window).kakao;\r\n\r\n  const info = [\r\n    {\r\n      title: '삼성동 코엑스',\r\n      latlng: new kakao.maps.LatLng(33.450701, 126.570667),\r\n      imgUrl: `${process.env.PUBLIC_URL}/img/marker1.png`,\r\n      imgSize: new kakao.maps.Size(232, 99),\r\n      imgPos: { offset: new kakao.maps.Point(116, 99) }\r\n    },\r\n    {\r\n      title: '올림픽 공원',\r\n      latlng: new kakao.maps.LatLng(37.5206868, 127.1214941),\r\n      imgUrl: `${process.env.PUBLIC_URL}/img/marker2.png`,\r\n      imgSize: new kakao.maps.Size(232, 99),\r\n      imgPos: { offset: new kakao.maps.Point(116, 99) }\r\n    },\r\n    {\r\n      title: '서울 시청',\r\n      latlng: new kakao.maps.LatLng(37.5657037, 126.9768616),\r\n      imgUrl: `${process.env.PUBLIC_URL}/img/marker3.png`,\r\n      imgSize: new kakao.maps.Size(232, 99),\r\n      imgPos: { offset: new kakao.maps.Point(116, 99) }\r\n    },\r\n  ];\r\n\r\n\r\n\r\n  // 리얼돔에서 참조하는 방법으로 querySelector 등의 방법은 가상돔인 리액트에서는 사용할 수 없다. 그래서 리액트에서는 useRef라는 훅을 이용해서 가상으로 생성된 DOM을 이용할 수 있다.\r\n  const container = useRef(null);\r\n  // useRef를 이용해서 가상돔을 참조할 변수로 컨테이너를 생성한 뒤, null 값으로 빈 구역을 만들어둠.\r\n  const btns = useRef(null);\r\n\r\n  const [Location, setLocation] = useState(null);\r\n  // useEffect에서 만들어진 지도 인스턴스를 담을 state를 생성하는 것\r\n\r\n  const [Traffic, setTraffic] = useState(false);\r\n  // Traffic 토글 기능 구현을 위한 state를 추가, 불린값을 부여한다.\r\n\r\n  const [Info] = useState(info);\r\n  // setInfo는 info가 바뀔 일이 없으므로 필요가 없다.\r\n\r\n  const [Index, setIndex] = useState(0);\r\n  // 인덱스가 변화될 때 렌더링이 필요하므로 useState에 담아 관리한다.\r\n  \r\n  const option = { //지도를 생성할 때 필요한 기본 옵션\r\n    center: Info[Index].latlng, //지도의 중심좌표.\r\n    level: 3 //지도의 레벨(확대, 축소 정도)\r\n  };\r\n  const markerPosition  = Info[Index].latlng; // 마커위치 인스턴스 생성\r\n  const imageSrc = Info[Index].imgUrl;\r\n  const imageSize = Info[Index].imgSize;\r\n  const imageOption = Info[Index].imgPos;\r\n  // 마커 이미지 변경에 필요한 정보값 3개를 등록\r\n\r\n  const markerImage = new kakao.maps.MarkerImage(\r\n    imageSrc,\r\n    imageSize,\r\n    imageOption\r\n  );\r\n\r\n  const marker = new kakao.maps.Marker({\r\n    position: markerPosition,\r\n    image: markerImage\r\n  });\r\n  // 위치 인스턴스 값을 인수로 전달해서 다시 마커 인스턴스 생성\r\n\r\n  \r\n  useEffect(() => {\r\n    container.current.innerHTML = '';\r\n\r\n    // 지도 인스턴스 최종생성\r\n    const map_instance = new kakao.maps.Map(container.current, option); //지도 인스턴스를 활용해서 마커를 생성하는 코드\r\n    marker.setMap(map_instance);\r\n    setLocation(map_instance);\r\n\r\n    const mapTypeControl = new kakao.maps.MapTypeControl();\r\n    map_instance.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\r\n\r\n    const zoomControl = new kakao.maps.ZoomControl();\r\n    map_instance.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\r\n\r\n    for(const btn of btns.current.children) btn.classList.remove('on');\r\n    btns.current.children[Index].classList.add('on');\r\n\r\n\r\n    window.addEventListener('resize', () => {\r\n      map_instance.setCenter(Info[Index].latlng);\r\n    })\r\n  }, [Index]); // <-- 기존 컴포넌트가 처음 마운트 되었을 때만 지도를 출력하던 방식에서, Index가 변경될 때 지도가 다시 렌더링 하는 방식으로 바꿈.\r\n\r\n\r\n  // 트래픽 토글 전용 useEffect \r\n  useEffect(() => {\r\n    if(!Location) return;\r\n    // Location state의 값은 두번째 호출부터 값이 담겨 사이클이 돌아가므로 처음 값이 존재하지 않는 초기 오류방지를 위해 조건문 처리함.\r\n\r\n    // 트레픽 값에 따라서 생성과 삭제로 나누어서 코드를 제공, 구현.\r\n    Traffic \r\n    ? Location.addOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC)\r\n    : Location.removeOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC) \r\n\r\n  }, [Traffic]); // traffic state의 값이 변경될 때마다 실행이 되는 구문.\r\n\r\n\r\n  return (\r\n    <Layout name={'Location'}>\r\n      <div id=\"map\" ref={container}></div>\r\n\r\n      <div className=\"btnSet\">\r\n\r\n      {/* 기존의 두개의 버튼에서 한개의 토글 버튼으로 바꿈.\r\n          버튼 클릭시 트래픽 값을 반전처리 => !Traffic\r\n      */}\r\n        <button onClick={() => { setTraffic(!Traffic) }\r\n        }>\r\n          {/* Traffic의 값에 따라서 버튼의 내용도 변경 */}\r\n        { Traffic ? 'Traffic OFF' : 'Traffic ON'}\r\n      </button>\r\n\r\n        <ul className=\"branch\" ref={btns}>\r\n          {/* 각 버튼을 클릭할 때마다 Index의 값을 변경 */}\r\n          {\r\n            Info.map((el, idx) => {\r\n              return(\r\n                <li key={idx} onClick={() => setIndex(idx)}>\r\n                  {el.title}\r\n                </li>\r\n              );\r\n            })\r\n          }\r\n        </ul>\r\n      </div>\r\n\r\n\r\n    </Layout>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}