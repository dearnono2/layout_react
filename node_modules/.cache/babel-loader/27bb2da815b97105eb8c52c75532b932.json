{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YS\\\\Desktop\\\\\\uB514\\uCF54\\uB4DC \\uCEF4\\uD4E8\\uD130\\uD559\\uC6D0\\\\221013 17\\uC77C\\uCC28\\\\layout_react\\\\src\\\\components\\\\sub\\\\Location.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport Layout from \"../common/Layout\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Location() {\n  _s();\n  const {\n    kakao\n  } = window;\n  // 윈도우 객체에 등록되어 있는 카카오키를 변수명으로 비구조화할당을 한것.\n  // 윈도우 객체가 카카오 객체를 사용할 수 있도록 하는 코드.\n  // const kakao = (window).kakao;\n\n  // 리얼돔에서 참조하는 방법으로 querySelector 등의 방법은 가상돔인 리액트에서는 사용할 수 없다. 그래서 리액트에서는 useRef라는 훅을 이용해서 가상으로 생성된 DOM을 이용할 수 있다.\n  const container = useRef(null);\n  // useRef를 이용해서 가상돔을 참조할 변수로 컨테이너를 생성한 뒤, null 값으로 빈 구역을 만들어둠.\n\n  const [Location, setLocation] = useState(null);\n  // useEffect에서 만들어진 지도 인스턴스를 담을 state를 생성하는 것\n\n  const [Traffic, setTraffic] = useState(false);\n  // Traffic 토글 기능 구현을 위한 state를 추가, 불린값을 부여한다.\n\n  const option = {\n    //지도를 생성할 때 필요한 기본 옵션\n    center: new kakao.maps.LatLng(33.450701, 126.570667),\n    //지도의 중심좌표.\n    level: 3 //지도의 레벨(확대, 축소 정도)\n  };\n\n  const markerPosition = new kakao.maps.LatLng(33.450701, 126.570667); // 마커위치 인스턴스 생성\n  const imageSrc = `${process.env.PUBLIC_URL}/img/marker1.png`;\n  const imageSize = new kakao.maps.Size(232, 99);\n  const imageOption = {\n    offset: new kakao.maps.Point(116, 99)\n  };\n  // 마커 이미지 변경에 필요한 정보값 3개를 등록\n\n  const markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOption);\n  const marker = new kakao.maps.Marker({\n    position: markerPosition,\n    image: markerImage\n  });\n  // 위치 인스턴스 값을 인수로 전달해서 다시 마커 인스턴스 생성\n\n  useEffect(() => {\n    // 지도 인스턴스 최종생성\n    const map_instance = new kakao.maps.Map(container.current, option); //지도 인스턴스를 활용해서 마커를 생성하는 코드\n    marker.setMap(map_instance);\n    setLocation(map_instance);\n  }, []);\n\n  // 트래픽 토글 전용 useEffect \n  useEffect(() => {\n    if (!Location) return;\n    // Location state의 값은 두번째 호출부터 값이 담겨 사이클이 돌아가므로 처음 값이 존재하지 않는 초기 오류방지를 위해 조건문 처리함.\n\n    // 트레픽 값에 따라서 생성과 삭제로 나누어서 코드를 제공, 구현.\n    Traffic ? Location.addOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC) : Location.removeOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC);\n  }, [Traffic]); // traffic state의 값이 변경될 때마다 실행이 되는 구문.\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    name: 'Location',\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      ref: container\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setTraffic(!Traffic);\n      },\n      children: Traffic ? 'Traffic OFF' : 'Traffic ON'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(Location, \"Iu7sQDX3gxaYVuBXACaL6Te4i4s=\");\n_c = Location;\nvar _c;\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"names":["useEffect","useRef","useState","Layout","Location","kakao","window","container","setLocation","Traffic","setTraffic","option","center","maps","LatLng","level","markerPosition","imageSrc","process","env","PUBLIC_URL","imageSize","Size","imageOption","offset","Point","markerImage","MarkerImage","marker","Marker","position","image","map_instance","Map","current","setMap","addOverlayMapTypeId","MapTypeId","TRAFFIC","removeOverlayMapTypeId"],"sources":["C:/Users/YS/Desktop/디코드 컴퓨터학원/221013 17일차/layout_react/src/components/sub/Location.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport Layout from \"../common/Layout\"\r\n\r\nexport default function Location() {\r\n\r\n  const { kakao } = window;\r\n  // 윈도우 객체에 등록되어 있는 카카오키를 변수명으로 비구조화할당을 한것.\r\n  // 윈도우 객체가 카카오 객체를 사용할 수 있도록 하는 코드.\r\n  // const kakao = (window).kakao;\r\n\r\n\r\n  // 리얼돔에서 참조하는 방법으로 querySelector 등의 방법은 가상돔인 리액트에서는 사용할 수 없다. 그래서 리액트에서는 useRef라는 훅을 이용해서 가상으로 생성된 DOM을 이용할 수 있다.\r\n  const container = useRef(null);\r\n  // useRef를 이용해서 가상돔을 참조할 변수로 컨테이너를 생성한 뒤, null 값으로 빈 구역을 만들어둠.\r\n\r\n  const [Location, setLocation] = useState(null);\r\n  // useEffect에서 만들어진 지도 인스턴스를 담을 state를 생성하는 것\r\n\r\n  const [Traffic, setTraffic] = useState(false);\r\n  // Traffic 토글 기능 구현을 위한 state를 추가, 불린값을 부여한다.\r\n\r\n  \r\n  const option = { //지도를 생성할 때 필요한 기본 옵션\r\n    center: new kakao.maps.LatLng(33.450701, 126.570667), //지도의 중심좌표.\r\n    level: 3 //지도의 레벨(확대, 축소 정도)\r\n  };\r\n  const markerPosition  = new kakao.maps.LatLng(33.450701, 126.570667); // 마커위치 인스턴스 생성\r\n  const imageSrc = `${process.env.PUBLIC_URL}/img/marker1.png`;\r\n  const imageSize = new kakao.maps.Size(232, 99);\r\n  const imageOption = {offset: new kakao.maps.Point(116, 99)};\r\n  // 마커 이미지 변경에 필요한 정보값 3개를 등록\r\n\r\n  const markerImage = new kakao.maps.MarkerImage(\r\n    imageSrc,\r\n    imageSize,\r\n    imageOption\r\n  );\r\n\r\n  const marker = new kakao.maps.Marker({\r\n    position: markerPosition,\r\n    image: markerImage\r\n  });\r\n  // 위치 인스턴스 값을 인수로 전달해서 다시 마커 인스턴스 생성\r\n\r\n  \r\n  useEffect(() => {\r\n    // 지도 인스턴스 최종생성\r\n    const map_instance = new kakao.maps.Map(container.current, option); //지도 인스턴스를 활용해서 마커를 생성하는 코드\r\n    marker.setMap(map_instance);\r\n    setLocation(map_instance);\r\n  }, []);\r\n\r\n\r\n  // 트래픽 토글 전용 useEffect \r\n  useEffect(() => {\r\n    if(!Location) return;\r\n    // Location state의 값은 두번째 호출부터 값이 담겨 사이클이 돌아가므로 처음 값이 존재하지 않는 초기 오류방지를 위해 조건문 처리함.\r\n\r\n    // 트레픽 값에 따라서 생성과 삭제로 나누어서 코드를 제공, 구현.\r\n    Traffic \r\n    ? Location.addOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC)\r\n    : Location.removeOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC) \r\n\r\n  }, [Traffic]); // traffic state의 값이 변경될 때마다 실행이 되는 구문.\r\n\r\n\r\n  return (\r\n    <Layout name={'Location'}>\r\n      <div id=\"map\" ref={container}></div>\r\n\r\n      <button onClick={() => { setTraffic(!Traffic) }\r\n      }>\r\n        { Traffic ? 'Traffic OFF' : 'Traffic ON'}\r\n      </button>\r\n    </Layout>\r\n  );\r\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAOC,MAAM,MAAM,kBAAkB;AAAA;AAErC,eAAe,SAASC,QAAQ,GAAG;EAAA;EAEjC,MAAM;IAAEC;EAAM,CAAC,GAAGC,MAAM;EACxB;EACA;EACA;;EAGA;EACA,MAAMC,SAAS,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC9B;;EAEA,MAAM,CAACG,QAAQ,EAAEI,WAAW,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC9C;;EAEA,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C;;EAGA,MAAMS,MAAM,GAAG;IAAE;IACfC,MAAM,EAAE,IAAIP,KAAK,CAACQ,IAAI,CAACC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC;IAAE;IACtDC,KAAK,EAAE,CAAC,CAAC;EACX,CAAC;;EACD,MAAMC,cAAc,GAAI,IAAIX,KAAK,CAACQ,IAAI,CAACC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC;EACtE,MAAMG,QAAQ,GAAI,GAAEC,OAAO,CAACC,GAAG,CAACC,UAAW,kBAAiB;EAC5D,MAAMC,SAAS,GAAG,IAAIhB,KAAK,CAACQ,IAAI,CAACS,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;EAC9C,MAAMC,WAAW,GAAG;IAACC,MAAM,EAAE,IAAInB,KAAK,CAACQ,IAAI,CAACY,KAAK,CAAC,GAAG,EAAE,EAAE;EAAC,CAAC;EAC3D;;EAEA,MAAMC,WAAW,GAAG,IAAIrB,KAAK,CAACQ,IAAI,CAACc,WAAW,CAC5CV,QAAQ,EACRI,SAAS,EACTE,WAAW,CACZ;EAED,MAAMK,MAAM,GAAG,IAAIvB,KAAK,CAACQ,IAAI,CAACgB,MAAM,CAAC;IACnCC,QAAQ,EAAEd,cAAc;IACxBe,KAAK,EAAEL;EACT,CAAC,CAAC;EACF;;EAGA1B,SAAS,CAAC,MAAM;IACd;IACA,MAAMgC,YAAY,GAAG,IAAI3B,KAAK,CAACQ,IAAI,CAACoB,GAAG,CAAC1B,SAAS,CAAC2B,OAAO,EAAEvB,MAAM,CAAC,CAAC,CAAC;IACpEiB,MAAM,CAACO,MAAM,CAACH,YAAY,CAAC;IAC3BxB,WAAW,CAACwB,YAAY,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;;EAGN;EACAhC,SAAS,CAAC,MAAM;IACd,IAAG,CAACI,QAAQ,EAAE;IACd;;IAEA;IACAK,OAAO,GACLL,QAAQ,CAACgC,mBAAmB,CAAC/B,KAAK,CAACQ,IAAI,CAACwB,SAAS,CAACC,OAAO,CAAC,GAC1DlC,QAAQ,CAACmC,sBAAsB,CAAClC,KAAK,CAACQ,IAAI,CAACwB,SAAS,CAACC,OAAO,CAAC;EAEjE,CAAC,EAAE,CAAC7B,OAAO,CAAC,CAAC,CAAC,CAAC;;EAGf,oBACE,QAAC,MAAM;IAAC,IAAI,EAAE,UAAW;IAAA,wBACvB;MAAK,EAAE,EAAC,KAAK;MAAC,GAAG,EAAEF;IAAU;MAAA;MAAA;MAAA;IAAA,QAAO,eAEpC;MAAQ,OAAO,EAAE,MAAM;QAAEG,UAAU,CAAC,CAACD,OAAO,CAAC;MAAC,CAC7C;MAAA,UACGA,OAAO,GAAG,aAAa,GAAG;IAAY;MAAA;MAAA;MAAA;IAAA,QACjC;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEb;AAAC,GAzEuBL,QAAQ;AAAA,KAARA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module"}