{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YS\\\\Desktop\\\\\\uB514\\uCF54\\uB4DC \\uCEF4\\uD4E8\\uD130\\uD559\\uC6D0\\\\221013 17\\uC77C\\uCC28\\\\layout_react\\\\src\\\\components\\\\sub\\\\Gallery.js\",\n  _s = $RefreshSig$();\nimport Layout from \"../common/Layout\";\nimport axios from 'axios';\nimport { useState, useEffect, useRef } from \"react\";\nimport Masonry from 'react-masonry-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Gallery() {\n  _s();\n  const key = '2b77b0bf16caab8d0940ed8495c064dc';\n  const method_interest = 'flickr.interestingness.getList';\n  const method_search = 'flickr.photos.search';\n  const num = 20;\n  const interest_url = `https://www.flickr.com/services/rest/?method=${method_interest}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1`;\n  const search_url = `https://www.flickr.com/services/rest/?method=${method_search}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1&tags=${'바다'}`;\n  const masonryOptions = {\n    transitionDuration: '0.5s'\n  };\n  const [Items, setItems] = useState([]);\n  const frame = useRef(null);\n  const getFlickr = async url => {\n    const result = await axios.get(url);\n    setItems(result.data.photos.photo);\n    frame.current.classList.add('on');\n  };\n  useEffect(() => getFlickr(interest_url), []);\n  //함수의 정의 형태로 콜백함수가 들어와야 한다, 함수를 단순 호출하는 형태는 읽어들일 수 없다\n  useEffect(() => {\n    getFlickr(interest_url);\n  }, [Items]);\n\n  // const interest_url = `https://www.flickr.com/services/rest/?method=${method_interest}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1`;\n  // const search_url = `https://www.flickr.com/services/rest/?method=${method_search}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1&tags=${'바다'}`;\n\n  // const masonryOptions = {transitionDuration: '0.5s'};\n\n  // const [Items, setItems] = useState([]);\n  // const frame = useRef(null);\n  // const getFlickr = async(url) => {\n  //   const result = await axios.get(url);\n  //   setItems(result.data.photos.photo);\n  //   frame.current.classList.add('on');\n  // };\n\n  // useEffect(() => getFlickr(interest_url), []);\n  // // 함수의 정의 형태로 콜백함수가 들어와야 한다. 함수를 단순 호출하는 형태는 읽어들일 수 없다. \n\n  // useEffect(() => {\n  //   getFlickr(interest_url);\n  // }, [Items])\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    name: 'Gallery',\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        frame.current.classList.remove('on');\n        getFlickr(interest_url);\n      },\n      children: \"Interest Gallery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        frame.current.classList.remove('on');\n        getFlickr(search_url);\n      },\n      children: \"Search Gallery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"frame\",\n      ref: frame,\n      children: /*#__PURE__*/_jsxDEV(Masonry, {\n        elementType: 'div',\n        options: masonryOptions,\n        children: Items.map((item, idx) => {\n          return /*#__PURE__*/_jsxDEV(\"article\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inner\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pic\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `https://live.staticflickr.com/${item.server}/${item.id}_${item.secret}_m.jpg`,\n                  alt: item.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: item.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n/*\r\n\r\n? 형태는 쿼리스트링하는 형태의 방법이다. \r\n쿼리 스트링은 ??\r\n\r\n사용자가 입력 데이터를 전달하는 방법중의 하나로 url 주소에 미리 협의된 데이터를 파라미터를 통해 넘기는 것을 말한다. \r\n파라미터는 물음표 뒤에 = 으로 연결된 key value 부분을 말한다. \r\nurl에 붙여서 추가적인 정보를 서버측에 전달하는 내용이다. \r\n클라이언트가 어떤 특정 리소스에 접근하고 싶어하는지의 정보를 담는것. \r\n\r\n형식(방법)\r\n- 정해진 엔드포인트 주소 이후에 ?를 쓰는 것으로 쿼리스트링이 시작함을 알린다. \r\n- parameter = value로 필요한 파라미터의 값을 적는다. \r\n- 파라미터가 여러개일 경우 &를 붙여서 여러개의 파라미터를 넘길 수 있다. \r\n- 엔드포인트주소/ 추가적인주소 ? 파라미터=값&파라미터=값\r\n\r\n*/\n_s(Gallery, \"jdUvoSVLu0eqhQm+Kmp/i/HhoHs=\");\n_c = Gallery;\nvar _c;\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"names":["Layout","axios","useState","useEffect","useRef","Masonry","Gallery","key","method_interest","method_search","num","interest_url","search_url","masonryOptions","transitionDuration","Items","setItems","frame","getFlickr","url","result","get","data","photos","photo","current","classList","add","remove","map","item","idx","server","id","secret","title"],"sources":["C:/Users/YS/Desktop/디코드 컴퓨터학원/221013 17일차/layout_react/src/components/sub/Gallery.js"],"sourcesContent":["import Layout from \"../common/Layout\";\r\nimport axios from 'axios';\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport Masonry from 'react-masonry-component';\r\n\r\nexport default function Gallery() {\r\n  const key = '2b77b0bf16caab8d0940ed8495c064dc';\r\n  const method_interest = 'flickr.interestingness.getList';\r\n  const method_search = 'flickr.photos.search';\r\n  const num = 20;\r\n\r\n  const interest_url = `https://www.flickr.com/services/rest/?method=${method_interest}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1`;\r\n  const search_url = `https://www.flickr.com/services/rest/?method=${method_search}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1&tags=${'바다'}`;\r\n  const masonryOptions = { transitionDuration: '0.5s' };\r\n\r\n  const [Items, setItems] = useState([]);\r\n  const frame = useRef(null);\r\n  const getFlickr = async (url) => {\r\n      const result = await axios.get(url);\r\n      setItems(result.data.photos.photo);\r\n      frame.current.classList.add('on');\r\n  };\r\n\r\n  useEffect(() => getFlickr(interest_url), []);\r\n  //함수의 정의 형태로 콜백함수가 들어와야 한다, 함수를 단순 호출하는 형태는 읽어들일 수 없다\r\n  useEffect(() => {\r\n      getFlickr(interest_url);\r\n  }, [Items])\r\n\r\n  // const interest_url = `https://www.flickr.com/services/rest/?method=${method_interest}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1`;\r\n  // const search_url = `https://www.flickr.com/services/rest/?method=${method_search}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1&tags=${'바다'}`;\r\n\r\n\r\n  // const masonryOptions = {transitionDuration: '0.5s'};\r\n\r\n  \r\n  // const [Items, setItems] = useState([]);\r\n  // const frame = useRef(null);\r\n  // const getFlickr = async(url) => {\r\n  //   const result = await axios.get(url);\r\n  //   setItems(result.data.photos.photo);\r\n  //   frame.current.classList.add('on');\r\n  // };\r\n\r\n\r\n  // useEffect(() => getFlickr(interest_url), []);\r\n  // // 함수의 정의 형태로 콜백함수가 들어와야 한다. 함수를 단순 호출하는 형태는 읽어들일 수 없다. \r\n\r\n  // useEffect(() => {\r\n  //   getFlickr(interest_url);\r\n  // }, [Items])\r\n\r\n  return (\r\n    <Layout name={'Gallery'}>\r\n      <button\r\n      onClick={() => {\r\n        frame.current.classList.remove('on');\r\n        getFlickr(interest_url);\r\n      }}>\r\n        Interest Gallery\r\n      </button>\r\n      <button onClick={() => {\r\n        frame.current.classList.remove('on');\r\n        getFlickr(search_url)\r\n      }}>\r\n        Search Gallery\r\n      </button>\r\n      <div className=\"frame\" ref={frame}>\r\n        <Masonry elementType={'div'} options={masonryOptions}>\r\n\r\n          {Items.map((item, idx) => {\r\n            return (\r\n              <article key={idx}>\r\n                <div className=\"inner\">\r\n                  <div className=\"pic\">\r\n                    <img \r\n                      src={`https://live.staticflickr.com/${item.server}/${item.id}_${item.secret}_m.jpg`} alt={item.title}>\r\n                    </img>\r\n                  </div>\r\n                  <h2>{item.title}</h2>\r\n                </div>\r\n              </article>\r\n            )\r\n          })}\r\n        </Masonry>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\n/*\r\n\r\n? 형태는 쿼리스트링하는 형태의 방법이다. \r\n쿼리 스트링은 ??\r\n\r\n사용자가 입력 데이터를 전달하는 방법중의 하나로 url 주소에 미리 협의된 데이터를 파라미터를 통해 넘기는 것을 말한다. \r\n파라미터는 물음표 뒤에 = 으로 연결된 key value 부분을 말한다. \r\nurl에 붙여서 추가적인 정보를 서버측에 전달하는 내용이다. \r\n클라이언트가 어떤 특정 리소스에 접근하고 싶어하는지의 정보를 담는것. \r\n\r\n형식(방법)\r\n- 정해진 엔드포인트 주소 이후에 ?를 쓰는 것으로 쿼리스트링이 시작함을 알린다. \r\n- parameter = value로 필요한 파라미터의 값을 적는다. \r\n- 파라미터가 여러개일 경우 &를 붙여서 여러개의 파라미터를 넘길 수 있다. \r\n- 엔드포인트주소/ 추가적인주소 ? 파라미터=값&파라미터=값\r\n\r\n*/"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,kBAAkB;AACrC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,OAAOC,OAAO,MAAM,yBAAyB;AAAC;AAE9C,eAAe,SAASC,OAAO,GAAG;EAAA;EAChC,MAAMC,GAAG,GAAG,kCAAkC;EAC9C,MAAMC,eAAe,GAAG,gCAAgC;EACxD,MAAMC,aAAa,GAAG,sBAAsB;EAC5C,MAAMC,GAAG,GAAG,EAAE;EAEd,MAAMC,YAAY,GAAI,gDAA+CH,eAAgB,aAAYE,GAAI,YAAWH,GAAI,+BAA8B;EAClJ,MAAMK,UAAU,GAAI,gDAA+CH,aAAc,aAAYC,GAAI,YAAWH,GAAI,sCAAqC,IAAK,EAAC;EAC3J,MAAMM,cAAc,GAAG;IAAEC,kBAAkB,EAAE;EAAO,CAAC;EAErD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMe,KAAK,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC1B,MAAMc,SAAS,GAAG,MAAOC,GAAG,IAAK;IAC7B,MAAMC,MAAM,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAACF,GAAG,CAAC;IACnCH,QAAQ,CAACI,MAAM,CAACE,IAAI,CAACC,MAAM,CAACC,KAAK,CAAC;IAClCP,KAAK,CAACQ,OAAO,CAACC,SAAS,CAACC,GAAG,CAAC,IAAI,CAAC;EACrC,CAAC;EAEDxB,SAAS,CAAC,MAAMe,SAAS,CAACP,YAAY,CAAC,EAAE,EAAE,CAAC;EAC5C;EACAR,SAAS,CAAC,MAAM;IACZe,SAAS,CAACP,YAAY,CAAC;EAC3B,CAAC,EAAE,CAACI,KAAK,CAAC,CAAC;;EAEX;EACA;;EAGA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;;EAEA;EACA;EACA;;EAEA,oBACE,QAAC,MAAM;IAAC,IAAI,EAAE,SAAU;IAAA,wBACtB;MACA,OAAO,EAAE,MAAM;QACbE,KAAK,CAACQ,OAAO,CAACC,SAAS,CAACE,MAAM,CAAC,IAAI,CAAC;QACpCV,SAAS,CAACP,YAAY,CAAC;MACzB,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAEO,eACT;MAAQ,OAAO,EAAE,MAAM;QACrBM,KAAK,CAACQ,OAAO,CAACC,SAAS,CAACE,MAAM,CAAC,IAAI,CAAC;QACpCV,SAAS,CAACN,UAAU,CAAC;MACvB,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAEO,eACT;MAAK,SAAS,EAAC,OAAO;MAAC,GAAG,EAAEK,KAAM;MAAA,uBAChC,QAAC,OAAO;QAAC,WAAW,EAAE,KAAM;QAAC,OAAO,EAAEJ,cAAe;QAAA,UAElDE,KAAK,CAACc,GAAG,CAAC,CAACC,IAAI,EAAEC,GAAG,KAAK;UACxB,oBACE;YAAA,uBACE;cAAK,SAAS,EAAC,OAAO;cAAA,wBACpB;gBAAK,SAAS,EAAC,KAAK;gBAAA,uBAClB;kBACE,GAAG,EAAG,iCAAgCD,IAAI,CAACE,MAAO,IAAGF,IAAI,CAACG,EAAG,IAAGH,IAAI,CAACI,MAAO,QAAQ;kBAAC,GAAG,EAAEJ,IAAI,CAACK;gBAAM;kBAAA;kBAAA;kBAAA;gBAAA;cACjG;gBAAA;gBAAA;gBAAA;cAAA,QACF,eACN;gBAAA,UAAKL,IAAI,CAACK;cAAK;gBAAA;gBAAA;gBAAA;cAAA,QAAM;YAAA;cAAA;cAAA;cAAA;YAAA;UACjB,GARMJ,GAAG;YAAA;YAAA;YAAA;UAAA,QASP;QAEd,CAAC;MAAC;QAAA;QAAA;QAAA;MAAA;IACM;MAAA;MAAA;MAAA;IAAA,QACN;EAAA;IAAA;IAAA;IAAA;EAAA,QACC;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA,GArFwBzB,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module"}