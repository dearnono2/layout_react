{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YS\\\\Desktop\\\\\\uB514\\uCF54\\uB4DC \\uCEF4\\uD4E8\\uD130\\uD559\\uC6D0\\\\221013 17\\uC77C\\uCC28\\\\layout_react\\\\src\\\\components\\\\sub\\\\Gallery.js\",\n  _s = $RefreshSig$();\n// import Layout from \"../common/Layout\";\n// import axios from 'axios';\n// import { useState, useEffect, useRef } from \"react\";\n// import Masonry from 'react-masonry-component';\n\n// export default function Gallery() {\n//   const masonryOptions = { transitionDuration: '0.5s' };\n//   const [Items, setItems] = useState([]);\n//   const [Loading, setLoading] = useState(true);\n//   const [EnableClick, setEnableClick] = useState(true);\n//   const frame = useRef(null);\n//   const input = useRef(null);\n\n//     /*\n//   interest 방식 호출\n//   getFlickr({\n//     type: 'interest',\n//   })\n//   search 방식 버튼\n//   getFlickr({\n//     type:'search',\n//     tags: '검색키워드',\n//   })\n//   */\n\n//   const getFlickr = async (opt) => {\n//     const key = '2b77b0bf16caab8d0940ed8495c064dc';\n//     const method_interest = 'flickr.interestingness.getList';\n//     const method_search = 'flickr.photos.search';\n//     const num = 500;\n//     let url = '';\n\n//     if (opt.type === 'interest') {\n//       url = `https://www.flickr.com/services/rest/?method=${method_interest}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1`;\n//   }\n//     if (opt.type === 'search') {\n//       url = `https://www.flickr.com/services/rest/?method=${method_search}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1&tags=${opt.tags}`;\n//     }\n\n//     // await axios.get(url).then((json) => {\n//     //   setItems(result.data.photos.photo);\n//     // })\n\n//     const result = await axios.get(url);\n//     setItems(result.data.photos.photo);\n\n//     // 셋타임아웃으로 비동기화 시키고 1초 딜레이를 준 뒤 로딩바를 안보이게 false로 바꾼 뒤에 on을 프레임에 붙여서 보이게한다.\n//     setTimeout(() => {\n//       setLoading(false);\n//       frame.current.classList.add('on');\n\n//       setTimeout(() => {\n//         setEnableClick(true);\n//       }, 1000) // 프레임에 on 붙이고 위로 올라오는 모션기간동안 0.5초 홀딩\n\n//     }, 2000) // 이미지 호출이 완료되고 masonry모션 적용시간까지 홀딩하는 1초\n\n//   };\n\n//   useEffect(() => getFlickr({ type: 'interest' }), []);\n//   //함수의 정의 형태로 콜백함수가 들어와야 한다, 함수를 단순 호출하는 형태는 읽어들일 수 없다\n\n//   return (\n//     <Layout name={'Gallery'}>\n//       {Loading && (\n//         <img\n//           className=\"loading\"\n//           src={`${process.env.PUBLIC_URL}/img/6.gif`}\n//         />\n//       )}\n//       <div className=\"controls\">\n//         <nav>\n//           <button\n//             onClick={() => {\n//               if(!EnableClick) return;\n//               // 모션중이면 false일태나 return으로 방지\n//               setEnableClick(false);\n//               // true로 들어와서 다시 false로 바꾸어 재이벤트 방지\n//               setLoading(true);\n//               frame.current.classList.remove('on');\n//               getFlickr({ type: 'interest' });\n//             }}>\n//               Interest Gallery\n//           </button>\n//           <button \n//             onClick={() => {\n//               if(!EnableClick) return;\n//               setEnableClick(false);\n//               setLoading(true);\n//               frame.current.classList.remove('on');\n//               getFlickr({ type: 'search', tag: 'landscape' });\n//             }}>\n//               Search Gallery\n//           </button>\n//         </nav>\n//         <div className=\"searchBox\">\n//           <input type=\"text\" ref={input} placeholder='검색어를 입력하세요' />\n//           <button \n//             onClick={() => {\n//               const result = input.current.value;\n//               input.current.value = '';\n//               if(!EnableClick) return;\n//               setEnableClick(false);\n//               setLoading(true);\n//               frame.current.classList.remove('on');\n//               getFlickr({ type: 'search', tag: result, });\n//             }}>\n//               Search\n//           </button>\n//         </div>\n//       </div>\n\n//       <div className=\"frame\" ref={frame}>\n//         <Masonry elementType={'div'} options={masonryOptions}>\n\n//           {Items.map((item, idx) => {\n//             return (\n//               <article key={idx}>\n//                 <div className=\"inner\">\n//                   <div className=\"pic\">\n//                     <img \n//                       src={`https://live.staticflickr.com/${item.server}/${item.id}_${item.secret}_m.jpg`} alt={item.title}>\n//                     </img>\n//                   </div>\n//                   <h2>{item.title}</h2>\n//                 </div>\n//               </article>\n//             )\n//           })}\n//         </Masonry>\n//       </div>\n//     </Layout>\n//   )\n// }\n\n/*\r\n\r\n? 형태는 쿼리스트링하는 형태의 방법이다. \r\n쿼리 스트링은 ??\r\n\r\n사용자가 입력 데이터를 전달하는 방법중의 하나로 url 주소에 미리 협의된 데이터를 파라미터를 통해 넘기는 것을 말한다. \r\n파라미터는 물음표 뒤에 = 으로 연결된 key value 부분을 말한다. \r\nurl에 붙여서 추가적인 정보를 서버측에 전달하는 내용이다. \r\n클라이언트가 어떤 특정 리소스에 접근하고 싶어하는지의 정보를 담는것. \r\n\r\n형식(방법)\r\n- 정해진 엔드포인트 주소 이후에 ?를 쓰는 것으로 쿼리스트링이 시작함을 알린다. \r\n- parameter = value로 필요한 파라미터의 값을 적는다. \r\n- 파라미터가 여러개일 경우 &를 붙여서 여러개의 파라미터를 넘길 수 있다. \r\n- 엔드포인트주소/ 추가적인주소 ? 파라미터=값&파라미터=값\r\n\r\n*/\n\nimport Layout from \"../common/Layout\";\nimport axios from \"axios\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Masonry from 'react-masonry-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Gallery() {\n  _s();\n  const masonryOptions = {\n    transitionDuration: '0.5s'\n  };\n  const [Items, setItems] = useState([]);\n  const [Loading, setLoading] = useState(true);\n  const [EnableClick, setEnableClick] = useState(true);\n  const frame = useRef(null);\n  const input = useRef(null);\n  /*\r\n  interest 방식 호출\r\n  getFlickr({\r\n      type: 'interest',\r\n  })\r\n  search 방식 버튼\r\n  getFlickr({\r\n      type:'search',\r\n      tags: '검색키워드',\r\n  })\r\n  */\n  const getFlickr = async opt => {\n    const key = '4612601b324a2fe5a1f5f7402bf8d87a';\n    const method_interest = \"flickr.interestingness.getList\";\n    const method_search = \"flickr.photos.search\";\n    const num = 500;\n    let url = '';\n    if (opt.type === 'interest') {\n      url = `https://www.flickr.com/services/rest/?method=${method_interest}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1`;\n    }\n    if (opt.type === 'search') {\n      url = `https://www.flickr.com/services/rest/?method=${method_search}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1&tags=${opt.tags}`;\n    }\n\n    // await axios.get(url).then((json) => {\n    //     setItems(json.data.photos.photo);\n    // })\n    const result = await axios.get(url);\n    setItems(result.data.photos.photo);\n\n    //셋타임아웃으로 비동기화 시키고 1초 딜레이를 준뒤 로딩바를 안보이게 false로 바꾼뒤에 on을 프레임에 붙여서 보이게한다\n    setTimeout(() => {\n      setLoading(false);\n      frame.current.classList.add('on');\n      setTimeout(() => {\n        setEnableClick(true);\n      }, 1000); //프레임에 on붙이고 위로 올라오는 모션기간동안 0.5초 홀딩\n    }, 2000); //이미지 호출이 완료되고 masonry모션 적용시간까지 홀딩하는 1초\n  };\n\n  useEffect(() => getFlickr({\n    type: 'interest'\n  }), []);\n  //함수의 정의 형태로 콜백함수가 들어와야 한다, 함수를 단순 호출하는 형태는 읽어들일 수 없다\n\n  //\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    name: 'Gallery',\n    children: [Loading && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"loading\",\n      src: `${process.env.PUBLIC_URL}/img/6.gif`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (!EnableClick) return;\n            //모션중이면 false일테니 return으로 방지\n            setEnableClick(false);\n            //true로 들어와서 다시 false로 바꾸어 재이벤트 방지\n            setLoading(true);\n            frame.current.classList.remove('on');\n            getFlickr({\n              type: 'interest'\n            });\n          },\n          children: \"Interest Gallery\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            if (!EnableClick) return;\n            setEnableClick(false);\n            setLoading(true);\n            frame.current.classList.remove('on');\n            getFlickr({\n              type: 'search',\n              tags: \"landscape\"\n            });\n          },\n          children: \"Search Gallery\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: input,\n          placeholder: \"\\uAC80\\uC0C9\\uC5B4\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            const result = input.current.value;\n            input.current.value = '';\n            if (!EnableClick) return;\n            setEnableClick(false);\n            setLoading(true);\n            frame.current.classList.remove('on');\n            getFlickr({\n              type: 'search',\n              tags: result\n            });\n          },\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"frame\",\n      ref: frame,\n      children: /*#__PURE__*/_jsxDEV(Masonry, {\n        elementType: 'div',\n        options: masonryOptions,\n        children: Items.map((item, idx) => {\n          return /*#__PURE__*/_jsxDEV(\"article\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inner\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pic\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `https://live.staticflickr.com/${item.server}/${item.id}_${item.secret}_m.jpg`,\n                  alt: item.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: item.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 33\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 9\n  }, this);\n}\n_s(Gallery, \"cE1LTBJ0Ogg2PISSnh1BJJFBPmQ=\");\n_c = Gallery;\nvar _c;\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"names":["Layout","axios","useState","useEffect","useRef","Masonry","Gallery","masonryOptions","transitionDuration","Items","setItems","Loading","setLoading","EnableClick","setEnableClick","frame","input","getFlickr","opt","key","method_interest","method_search","num","url","type","tags","result","get","data","photos","photo","setTimeout","current","classList","add","process","env","PUBLIC_URL","remove","value","map","item","idx","server","id","secret","title"],"sources":["C:/Users/YS/Desktop/디코드 컴퓨터학원/221013 17일차/layout_react/src/components/sub/Gallery.js"],"sourcesContent":["// import Layout from \"../common/Layout\";\r\n// import axios from 'axios';\r\n// import { useState, useEffect, useRef } from \"react\";\r\n// import Masonry from 'react-masonry-component';\r\n\r\n// export default function Gallery() {\r\n//   const masonryOptions = { transitionDuration: '0.5s' };\r\n//   const [Items, setItems] = useState([]);\r\n//   const [Loading, setLoading] = useState(true);\r\n//   const [EnableClick, setEnableClick] = useState(true);\r\n//   const frame = useRef(null);\r\n//   const input = useRef(null);\r\n\r\n//     /*\r\n//   interest 방식 호출\r\n//   getFlickr({\r\n//     type: 'interest',\r\n//   })\r\n//   search 방식 버튼\r\n//   getFlickr({\r\n//     type:'search',\r\n//     tags: '검색키워드',\r\n//   })\r\n//   */\r\n\r\n//   const getFlickr = async (opt) => {\r\n//     const key = '2b77b0bf16caab8d0940ed8495c064dc';\r\n//     const method_interest = 'flickr.interestingness.getList';\r\n//     const method_search = 'flickr.photos.search';\r\n//     const num = 500;\r\n//     let url = '';\r\n\r\n//     if (opt.type === 'interest') {\r\n//       url = `https://www.flickr.com/services/rest/?method=${method_interest}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1`;\r\n//   }\r\n//     if (opt.type === 'search') {\r\n//       url = `https://www.flickr.com/services/rest/?method=${method_search}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1&tags=${opt.tags}`;\r\n//     }\r\n\r\n//     // await axios.get(url).then((json) => {\r\n//     //   setItems(result.data.photos.photo);\r\n//     // })\r\n\r\n//     const result = await axios.get(url);\r\n//     setItems(result.data.photos.photo);\r\n    \r\n//     // 셋타임아웃으로 비동기화 시키고 1초 딜레이를 준 뒤 로딩바를 안보이게 false로 바꾼 뒤에 on을 프레임에 붙여서 보이게한다.\r\n//     setTimeout(() => {\r\n//       setLoading(false);\r\n//       frame.current.classList.add('on');\r\n\r\n//       setTimeout(() => {\r\n//         setEnableClick(true);\r\n//       }, 1000) // 프레임에 on 붙이고 위로 올라오는 모션기간동안 0.5초 홀딩\r\n\r\n//     }, 2000) // 이미지 호출이 완료되고 masonry모션 적용시간까지 홀딩하는 1초\r\n\r\n//   };\r\n\r\n//   useEffect(() => getFlickr({ type: 'interest' }), []);\r\n//   //함수의 정의 형태로 콜백함수가 들어와야 한다, 함수를 단순 호출하는 형태는 읽어들일 수 없다\r\n  \r\n\r\n//   return (\r\n//     <Layout name={'Gallery'}>\r\n//       {Loading && (\r\n//         <img\r\n//           className=\"loading\"\r\n//           src={`${process.env.PUBLIC_URL}/img/6.gif`}\r\n//         />\r\n//       )}\r\n//       <div className=\"controls\">\r\n//         <nav>\r\n//           <button\r\n//             onClick={() => {\r\n//               if(!EnableClick) return;\r\n//               // 모션중이면 false일태나 return으로 방지\r\n//               setEnableClick(false);\r\n//               // true로 들어와서 다시 false로 바꾸어 재이벤트 방지\r\n//               setLoading(true);\r\n//               frame.current.classList.remove('on');\r\n//               getFlickr({ type: 'interest' });\r\n//             }}>\r\n//               Interest Gallery\r\n//           </button>\r\n//           <button \r\n//             onClick={() => {\r\n//               if(!EnableClick) return;\r\n//               setEnableClick(false);\r\n//               setLoading(true);\r\n//               frame.current.classList.remove('on');\r\n//               getFlickr({ type: 'search', tag: 'landscape' });\r\n//             }}>\r\n//               Search Gallery\r\n//           </button>\r\n//         </nav>\r\n//         <div className=\"searchBox\">\r\n//           <input type=\"text\" ref={input} placeholder='검색어를 입력하세요' />\r\n//           <button \r\n//             onClick={() => {\r\n//               const result = input.current.value;\r\n//               input.current.value = '';\r\n//               if(!EnableClick) return;\r\n//               setEnableClick(false);\r\n//               setLoading(true);\r\n//               frame.current.classList.remove('on');\r\n//               getFlickr({ type: 'search', tag: result, });\r\n//             }}>\r\n//               Search\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n      \r\n//       <div className=\"frame\" ref={frame}>\r\n//         <Masonry elementType={'div'} options={masonryOptions}>\r\n\r\n//           {Items.map((item, idx) => {\r\n//             return (\r\n//               <article key={idx}>\r\n//                 <div className=\"inner\">\r\n//                   <div className=\"pic\">\r\n//                     <img \r\n//                       src={`https://live.staticflickr.com/${item.server}/${item.id}_${item.secret}_m.jpg`} alt={item.title}>\r\n//                     </img>\r\n//                   </div>\r\n//                   <h2>{item.title}</h2>\r\n//                 </div>\r\n//               </article>\r\n//             )\r\n//           })}\r\n//         </Masonry>\r\n//       </div>\r\n//     </Layout>\r\n//   )\r\n// }\r\n\r\n/*\r\n\r\n? 형태는 쿼리스트링하는 형태의 방법이다. \r\n쿼리 스트링은 ??\r\n\r\n사용자가 입력 데이터를 전달하는 방법중의 하나로 url 주소에 미리 협의된 데이터를 파라미터를 통해 넘기는 것을 말한다. \r\n파라미터는 물음표 뒤에 = 으로 연결된 key value 부분을 말한다. \r\nurl에 붙여서 추가적인 정보를 서버측에 전달하는 내용이다. \r\n클라이언트가 어떤 특정 리소스에 접근하고 싶어하는지의 정보를 담는것. \r\n\r\n형식(방법)\r\n- 정해진 엔드포인트 주소 이후에 ?를 쓰는 것으로 쿼리스트링이 시작함을 알린다. \r\n- parameter = value로 필요한 파라미터의 값을 적는다. \r\n- 파라미터가 여러개일 경우 &를 붙여서 여러개의 파라미터를 넘길 수 있다. \r\n- 엔드포인트주소/ 추가적인주소 ? 파라미터=값&파라미터=값\r\n\r\n*/\r\n\r\nimport Layout from \"../common/Layout\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport Masonry from 'react-masonry-component';\r\n\r\n\r\nexport default function Gallery() {\r\n\r\n    const masonryOptions = { transitionDuration: '0.5s' };\r\n    const [Items, setItems] = useState([]);\r\n    const [Loading, setLoading] = useState(true);\r\n    const [EnableClick, setEnableClick] = useState(true);\r\n    const frame = useRef(null);\r\n    const input = useRef(null);\r\n    /*\r\n    interest 방식 호출\r\n    getFlickr({\r\n        type: 'interest',\r\n    })\r\n    search 방식 버튼\r\n    getFlickr({\r\n        type:'search',\r\n        tags: '검색키워드',\r\n    })\r\n    */\r\n    const getFlickr = async (opt) => {\r\n        const key = '4612601b324a2fe5a1f5f7402bf8d87a';\r\n        const method_interest = \"flickr.interestingness.getList\";\r\n        const method_search = \"flickr.photos.search\";\r\n        const num = 500;\r\n        let url = '';\r\n\r\n        if (opt.type === 'interest') {\r\n            url = `https://www.flickr.com/services/rest/?method=${method_interest}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1`;\r\n        }\r\n        if (opt.type === 'search') {\r\n            url = `https://www.flickr.com/services/rest/?method=${method_search}&per_page=${num}&api_key=${key}&format=json&nojsoncallback=1&tags=${opt.tags}`;\r\n        }\r\n\r\n\r\n        // await axios.get(url).then((json) => {\r\n        //     setItems(json.data.photos.photo);\r\n        // })\r\n        const result = await axios.get(url);\r\n        setItems(result.data.photos.photo);\r\n\r\n        //셋타임아웃으로 비동기화 시키고 1초 딜레이를 준뒤 로딩바를 안보이게 false로 바꾼뒤에 on을 프레임에 붙여서 보이게한다\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n            frame.current.classList.add('on');\r\n\r\n            setTimeout(() => {\r\n                setEnableClick(true);\r\n            }, 1000);//프레임에 on붙이고 위로 올라오는 모션기간동안 0.5초 홀딩\r\n\r\n        }, 2000); //이미지 호출이 완료되고 masonry모션 적용시간까지 홀딩하는 1초\r\n\r\n\r\n\r\n    };\r\n\r\n    useEffect(() => getFlickr({ type: 'interest' }), []);\r\n    //함수의 정의 형태로 콜백함수가 들어와야 한다, 함수를 단순 호출하는 형태는 읽어들일 수 없다\r\n\r\n\r\n    //\r\n\r\n    return (\r\n        <Layout name={'Gallery'}>\r\n            {Loading && (\r\n                <img\r\n                    className=\"loading\"\r\n                    src={`${process.env.PUBLIC_URL}/img/6.gif`}\r\n                />\r\n            )}\r\n\r\n            <div className=\"controls\">\r\n                <nav>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!EnableClick) return;\r\n                            //모션중이면 false일테니 return으로 방지\r\n                            setEnableClick(false);\r\n                            //true로 들어와서 다시 false로 바꾸어 재이벤트 방지\r\n                            setLoading(true);\r\n                            frame.current.classList.remove('on');\r\n                            getFlickr({ type: 'interest' });\r\n                        }}\r\n                    >\r\n                        Interest Gallery\r\n                    </button>\r\n                    <button\r\n                        onClick={() => {\r\n                            if (!EnableClick) return;\r\n                            setEnableClick(false);\r\n                            setLoading(true);\r\n                            frame.current.classList.remove('on');\r\n                            getFlickr({ type: 'search', tags: \"landscape\" });\r\n                        }}\r\n                    >\r\n                        Search Gallery\r\n                    </button>\r\n                </nav>\r\n                <div className=\"searchBox\">\r\n                    <input type=\"text\" ref={input} placeholder='검색어를 입력하세요' />\r\n                    <button\r\n                        onClick={() => {\r\n                            const result = input.current.value;\r\n                            input.current.value = '';\r\n                            if (!EnableClick) return;\r\n                            setEnableClick(false);\r\n                            setLoading(true);\r\n                            frame.current.classList.remove('on');\r\n                            getFlickr({ type: 'search', tags: result, });\r\n                        }}\r\n                    >Search</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"frame\" ref={frame}>\r\n                <Masonry elementType={'div'} options={masonryOptions}>\r\n\r\n\r\n                    {Items.map((item, idx) => {\r\n                        return (\r\n                            <article key={idx}>\r\n                                <div className=\"inner\">\r\n                                    <div className=\"pic\">\r\n                                        <img\r\n                                            src={`https://live.staticflickr.com/${item.server}/${item.id}_${item.secret}_m.jpg`}\r\n                                            alt={item.title} />\r\n                                    </div>\r\n                                    <h2>{item.title}</h2>\r\n                                </div>\r\n                            </article>\r\n                        )\r\n                    })}\r\n                </Masonry>\r\n            </div>\r\n        </Layout>\r\n    );\r\n}"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAM,kBAAkB;AACrC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,OAAOC,OAAO,MAAM,yBAAyB;AAAC;AAG9C,eAAe,SAASC,OAAO,GAAG;EAAA;EAE9B,MAAMC,cAAc,GAAG;IAAEC,kBAAkB,EAAE;EAAO,CAAC;EACrD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMa,KAAK,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC1B,MAAMY,KAAK,GAAGZ,MAAM,CAAC,IAAI,CAAC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"},"metadata":{},"sourceType":"module"}