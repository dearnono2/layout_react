{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YS\\\\Desktop\\\\\\uB514\\uCF54\\uB4DC \\uCEF4\\uD4E8\\uD130\\uD559\\uC6D0\\\\221013 17\\uC77C\\uCC28\\\\layout_react\\\\src\\\\components\\\\sub\\\\Gallery.js\",\n  _s = $RefreshSig$();\nimport Layout from \"../common/Layout\";\nimport axios from 'axios';\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Gallery() {\n  _s();\n  const key = '2b77b0bf16caab8d0940ed8495c064dc';\n  const method_interest = 'flickr.interestingness.getList';\n  const method_search = 'flickr.photos.search';\n  const num = 20;\n  const url = `https://www.flickr.com/services/rest/?method=${method_interest}&per_pages=${num}&api_key=${key}&format=json&nojsoncallback=1`;\n  const [Items, setItems] = useState([]);\n\n  // 처음 마운트가 될 때 정보를 요청해서 불러와야한다.\n  // useEffect(() => {\n  //   axios.get(url).then((json) => {\n  //     console.log(json.data.photos.photo);\n  //   })\n  // }, [])\n  useEffect(async () => {\n    const result = await axios.get(url);\n    // console.log(result.data.photos.photo);\n    setItems(result.data.photos.photo);\n  }, []);\n  useEffect(() => {\n    console.log(Items);\n  }, [Items]);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    name: 'Gallery',\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"frame\",\n      children: Items.map((item, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"article\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inner\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pic\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `https://live.staticflickr.com/${item.server}/${item.id}_${item.secret}_m.jpg`,\n                alt: item.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 15\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n/*\r\n\r\n? 형태는 쿼리스트링하는 형태의 방법이다. \r\n쿼리 스트링은 ??\r\n\r\n사용자가 입력 데이터를 전달하는 방법중의 하나로 url 주소에 미리 협의된 데이터를 파라미터를 통해 넘기는 것을 말한다. \r\n파라미터는 물음표 뒤에 = 으로 연결된 key value 부분을 말한다. \r\nurl에 붙여서 추가적인 정보를 서버측에 전달하는 내용이다. \r\n클라이언트가 어떤 특정 리소스에 접근하고 싶어하는지의 정보를 담는것. \r\n\r\n형식(방법)\r\n- 정해진 엔드포인트 주소 이후에 ?를 쓰는 것으로 쿼리스트링이 시작함을 알린다. \r\n- parameter = value로 필요한 파라미터의 값을 적는다. \r\n- 파라미터가 여러개일 경우 &를 붙여서 여러개의 파라미터를 넘길 수 있다. \r\n- 엔드포인트주소/ 추가적인주소 ? 파라미터=값&파라미터=값\r\n\r\n*/\n_s(Gallery, \"B0rJHGEuwvn242w6BQJc4u9FEXY=\");\n_c = Gallery;\nvar _c;\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"names":["Layout","axios","useEffect","useState","Gallery","key","method_interest","method_search","num","url","Items","setItems","result","get","data","photos","photo","console","log","map","item","idx","server","id","secret","title"],"sources":["C:/Users/YS/Desktop/디코드 컴퓨터학원/221013 17일차/layout_react/src/components/sub/Gallery.js"],"sourcesContent":["import Layout from \"../common/Layout\"\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function Gallery() {\r\n  const key = '2b77b0bf16caab8d0940ed8495c064dc';\r\n  const method_interest = 'flickr.interestingness.getList';\r\n  const method_search = 'flickr.photos.search';\r\n  const num = 20;\r\n  const url = `https://www.flickr.com/services/rest/?method=${method_interest}&per_pages=${num}&api_key=${key}&format=json&nojsoncallback=1`;\r\n  const [Items, setItems] = useState([]);\r\n\r\n  // 처음 마운트가 될 때 정보를 요청해서 불러와야한다.\r\n  // useEffect(() => {\r\n  //   axios.get(url).then((json) => {\r\n  //     console.log(json.data.photos.photo);\r\n  //   })\r\n  // }, [])\r\n  useEffect(async () => {\r\n    const result = await axios.get(url);\r\n    // console.log(result.data.photos.photo);\r\n    setItems(result.data.photos.photo);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(Items)\r\n  }, [Items])\r\n\r\n  return (\r\n    <Layout name={'Gallery'}>\r\n      <div className=\"frame\">\r\n        {Items.map((item, idx) => {\r\n          return (\r\n            <article key={idx}>\r\n              <div className=\"inner\">\r\n                <div className=\"pic\">\r\n                  <img \r\n                    src={`https://live.staticflickr.com/${item.server}/${item.id}_${item.secret}_m.jpg`} alt={item.title}>\r\n                  </img>\r\n                </div>\r\n              </div>\r\n            </article>\r\n          )\r\n        })}\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\n/*\r\n\r\n? 형태는 쿼리스트링하는 형태의 방법이다. \r\n쿼리 스트링은 ??\r\n\r\n사용자가 입력 데이터를 전달하는 방법중의 하나로 url 주소에 미리 협의된 데이터를 파라미터를 통해 넘기는 것을 말한다. \r\n파라미터는 물음표 뒤에 = 으로 연결된 key value 부분을 말한다. \r\nurl에 붙여서 추가적인 정보를 서버측에 전달하는 내용이다. \r\n클라이언트가 어떤 특정 리소스에 접근하고 싶어하는지의 정보를 담는것. \r\n\r\n형식(방법)\r\n- 정해진 엔드포인트 주소 이후에 ?를 쓰는 것으로 쿼리스트링이 시작함을 알린다. \r\n- parameter = value로 필요한 파라미터의 값을 적는다. \r\n- 파라미터가 여러개일 경우 &를 붙여서 여러개의 파라미터를 넘길 수 있다. \r\n- 엔드포인트주소/ 추가적인주소 ? 파라미터=값&파라미터=값\r\n\r\n*/"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,kBAAkB;AACrC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAE5C,eAAe,SAASC,OAAO,GAAG;EAAA;EAChC,MAAMC,GAAG,GAAG,kCAAkC;EAC9C,MAAMC,eAAe,GAAG,gCAAgC;EACxD,MAAMC,aAAa,GAAG,sBAAsB;EAC5C,MAAMC,GAAG,GAAG,EAAE;EACd,MAAMC,GAAG,GAAI,gDAA+CH,eAAgB,cAAaE,GAAI,YAAWH,GAAI,+BAA8B;EAC1I,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA;EACA;EACA;EACA;EACA;EACAD,SAAS,CAAC,YAAY;IACpB,MAAMU,MAAM,GAAG,MAAMX,KAAK,CAACY,GAAG,CAACJ,GAAG,CAAC;IACnC;IACAE,QAAQ,CAACC,MAAM,CAACE,IAAI,CAACC,MAAM,CAACC,KAAK,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC;EAENd,SAAS,CAAC,MAAM;IACde,OAAO,CAACC,GAAG,CAACR,KAAK,CAAC;EACpB,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,oBACE,QAAC,MAAM;IAAC,IAAI,EAAE,SAAU;IAAA,uBACtB;MAAK,SAAS,EAAC,OAAO;MAAA,UACnBA,KAAK,CAACS,GAAG,CAAC,CAACC,IAAI,EAAEC,GAAG,KAAK;QACxB,oBACE;UAAA,uBACE;YAAK,SAAS,EAAC,OAAO;YAAA,uBACpB;cAAK,SAAS,EAAC,KAAK;cAAA,uBAClB;gBACE,GAAG,EAAG,iCAAgCD,IAAI,CAACE,MAAO,IAAGF,IAAI,CAACG,EAAG,IAAGH,IAAI,CAACI,MAAO,QAAQ;gBAAC,GAAG,EAAEJ,IAAI,CAACK;cAAM;gBAAA;gBAAA;gBAAA;cAAA;YACjG;cAAA;cAAA;cAAA;YAAA;UACF;YAAA;YAAA;YAAA;UAAA;QACF,GAPMJ,GAAG;UAAA;UAAA;UAAA;QAAA,QAQP;MAEd,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA;EACE;IAAA;IAAA;IAAA;EAAA,QACC;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA,GA7CwBjB,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module"}