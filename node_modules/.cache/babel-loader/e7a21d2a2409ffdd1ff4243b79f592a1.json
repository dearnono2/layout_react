{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YS\\\\Desktop\\\\\\uB514\\uCF54\\uB4DC \\uCEF4\\uD4E8\\uD130\\uD559\\uC6D0\\\\221013 17\\uC77C\\uCC28\\\\layout_react\\\\src\\\\components\\\\sub\\\\Location.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport Layout from \"../common/Layout\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Location() {\n  _s();\n  const {\n    kakao\n  } = window;\n  // 윈도우 객체에 등록되어 있는 카카오키를 변수명으로 비구조화할당을 한것.\n  // 윈도우 객체가 카카오 객체를 사용할 수 있도록 하는 코드.\n  // const kakao = (window).kakao;\n\n  const info = [{\n    title: '삼성동 코엑스',\n    latlng: new kakao.maps.LatLng(33.450701, 126.570667),\n    imgUrl: `${process.env.PUBLIC_URL}/img/marker1.png`,\n    imgSize: new kakao.maps.Size(232, 99),\n    imgPos: {\n      offset: new kakao.maps.Point(116, 99)\n    }\n  }, {\n    title: '올림픽 공원',\n    latlng: new kakao.maps.LatLng(37.5206868, 127.1214941),\n    imgUrl: `${process.env.PUBLIC_URL}/img/marker2.png`,\n    imgSize: new kakao.maps.Size(232, 99),\n    imgPos: {\n      offset: new kakao.maps.Point(116, 99)\n    }\n  }, {\n    title: '서울 시청',\n    latlng: new kakao.maps.LatLng(37.5657037, 126.9768616),\n    imgUrl: `${process.env.PUBLIC_URL}/img/marker3.png`,\n    imgSize: new kakao.maps.Size(232, 99),\n    imgPos: {\n      offset: new kakao.maps.Point(116, 99)\n    }\n  }];\n\n  // 리얼돔에서 참조하는 방법으로 querySelector 등의 방법은 가상돔인 리액트에서는 사용할 수 없다. 그래서 리액트에서는 useRef라는 훅을 이용해서 가상으로 생성된 DOM을 이용할 수 있다.\n  const container = useRef(null);\n  // useRef를 이용해서 가상돔을 참조할 변수로 컨테이너를 생성한 뒤, null 값으로 빈 구역을 만들어둠.\n  const btns = useRef(null);\n  const [Location, setLocation] = useState(null);\n  // useEffect에서 만들어진 지도 인스턴스를 담을 state를 생성하는 것\n\n  const [Traffic, setTraffic] = useState(false);\n  // Traffic 토글 기능 구현을 위한 state를 추가, 불린값을 부여한다.\n\n  const [Info] = useState(info);\n  // setInfo는 info가 바뀔 일이 없으므로 필요가 없다.\n\n  const [Index, setIndex] = useState(0);\n  // 인덱스가 변화될 때 렌더링이 필요하므로 useState에 담아 관리한다.\n\n  const option = {\n    //지도를 생성할 때 필요한 기본 옵션\n    center: Info[Index].latlng,\n    //지도의 중심좌표.\n    level: 3 //지도의 레벨(확대, 축소 정도)\n  };\n\n  const markerPosition = Info[Index].latlng; // 마커위치 인스턴스 생성\n  const imageSrc = Info[Index].imgUrl;\n  const imageSize = Info[Index].imgSize;\n  const imageOption = Info[Index].imgPos;\n  // 마커 이미지 변경에 필요한 정보값 3개를 등록\n\n  const markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOption);\n  const marker = new kakao.maps.Marker({\n    position: markerPosition,\n    image: markerImage\n  });\n  // 위치 인스턴스 값을 인수로 전달해서 다시 마커 인스턴스 생성\n\n  useEffect(() => {\n    // 지도 인스턴스 최종생성\n    const map_instance = new kakao.maps.Map(container.current, option); //지도 인스턴스를 활용해서 마커를 생성하는 코드\n    marker.setMap(map_instance);\n    setLocation(map_instance);\n\n    // for(const btn of btns.current.children) btn.classList.remove('on');\n    // btns.current.children[Index].classList.add('on');\n  }, [Index]); // <-- 기존 컴포넌트가 처음 마운트 되었을 때만 지도를 출력하던 방식에서, Index가 변경될 때 지도가 다시 렌더링 하는 방식으로 바꿈.\n\n  // 트래픽 토글 전용 useEffect \n  useEffect(() => {\n    if (!Location) return;\n    // Location state의 값은 두번째 호출부터 값이 담겨 사이클이 돌아가므로 처음 값이 존재하지 않는 초기 오류방지를 위해 조건문 처리함.\n\n    // 트레픽 값에 따라서 생성과 삭제로 나누어서 코드를 제공, 구현.\n    Traffic ? Location.addOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC) : Location.removeOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC);\n  }, [Traffic]); // traffic state의 값이 변경될 때마다 실행이 되는 구문.\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    name: 'Location',\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      ref: container\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btnSet\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setTraffic(!Traffic);\n        },\n        children: Traffic ? 'Traffic OFF' : 'Traffic ON'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"branch\",\n        ref: btns,\n        children: Info.map((el, idx) => {\n          let on = '';\n          Index === idx ? on = 'on' : on = '';\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => setIndex(idx),\n            className: on,\n            children: el.title\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(Location, \"Ar+TLgJdVAhADKbPpaIxMIqkaTg=\");\n_c = Location;\nvar _c;\n$RefreshReg$(_c, \"Location\");","map":{"version":3,"names":["useEffect","useRef","useState","Layout","Location","kakao","window","info","title","latlng","maps","LatLng","imgUrl","process","env","PUBLIC_URL","imgSize","Size","imgPos","offset","Point","container","btns","setLocation","Traffic","setTraffic","Info","Index","setIndex","option","center","level","markerPosition","imageSrc","imageSize","imageOption","markerImage","MarkerImage","marker","Marker","position","image","map_instance","Map","current","setMap","addOverlayMapTypeId","MapTypeId","TRAFFIC","removeOverlayMapTypeId","map","el","idx","on"],"sources":["C:/Users/YS/Desktop/디코드 컴퓨터학원/221013 17일차/layout_react/src/components/sub/Location.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport Layout from \"../common/Layout\"\r\n\r\nexport default function Location() {\r\n\r\n  const { kakao } = window;\r\n  // 윈도우 객체에 등록되어 있는 카카오키를 변수명으로 비구조화할당을 한것.\r\n  // 윈도우 객체가 카카오 객체를 사용할 수 있도록 하는 코드.\r\n  // const kakao = (window).kakao;\r\n\r\n  const info = [\r\n    {\r\n      title: '삼성동 코엑스',\r\n      latlng: new kakao.maps.LatLng(33.450701, 126.570667),\r\n      imgUrl: `${process.env.PUBLIC_URL}/img/marker1.png`,\r\n      imgSize: new kakao.maps.Size(232, 99),\r\n      imgPos: { offset: new kakao.maps.Point(116, 99) }\r\n    },\r\n    {\r\n      title: '올림픽 공원',\r\n      latlng: new kakao.maps.LatLng(37.5206868, 127.1214941),\r\n      imgUrl: `${process.env.PUBLIC_URL}/img/marker2.png`,\r\n      imgSize: new kakao.maps.Size(232, 99),\r\n      imgPos: { offset: new kakao.maps.Point(116, 99) }\r\n    },\r\n    {\r\n      title: '서울 시청',\r\n      latlng: new kakao.maps.LatLng(37.5657037, 126.9768616),\r\n      imgUrl: `${process.env.PUBLIC_URL}/img/marker3.png`,\r\n      imgSize: new kakao.maps.Size(232, 99),\r\n      imgPos: { offset: new kakao.maps.Point(116, 99) }\r\n    },\r\n  ];\r\n\r\n\r\n\r\n  // 리얼돔에서 참조하는 방법으로 querySelector 등의 방법은 가상돔인 리액트에서는 사용할 수 없다. 그래서 리액트에서는 useRef라는 훅을 이용해서 가상으로 생성된 DOM을 이용할 수 있다.\r\n  const container = useRef(null);\r\n  // useRef를 이용해서 가상돔을 참조할 변수로 컨테이너를 생성한 뒤, null 값으로 빈 구역을 만들어둠.\r\n  const btns = useRef(null);\r\n\r\n  const [Location, setLocation] = useState(null);\r\n  // useEffect에서 만들어진 지도 인스턴스를 담을 state를 생성하는 것\r\n\r\n  const [Traffic, setTraffic] = useState(false);\r\n  // Traffic 토글 기능 구현을 위한 state를 추가, 불린값을 부여한다.\r\n\r\n  const [Info] = useState(info);\r\n  // setInfo는 info가 바뀔 일이 없으므로 필요가 없다.\r\n\r\n  const [Index, setIndex] = useState(0);\r\n  // 인덱스가 변화될 때 렌더링이 필요하므로 useState에 담아 관리한다.\r\n  \r\n  const option = { //지도를 생성할 때 필요한 기본 옵션\r\n    center: Info[Index].latlng, //지도의 중심좌표.\r\n    level: 3 //지도의 레벨(확대, 축소 정도)\r\n  };\r\n  const markerPosition  = Info[Index].latlng; // 마커위치 인스턴스 생성\r\n  const imageSrc = Info[Index].imgUrl;\r\n  const imageSize = Info[Index].imgSize;\r\n  const imageOption = Info[Index].imgPos;\r\n  // 마커 이미지 변경에 필요한 정보값 3개를 등록\r\n\r\n  const markerImage = new kakao.maps.MarkerImage(\r\n    imageSrc,\r\n    imageSize,\r\n    imageOption\r\n  );\r\n\r\n  const marker = new kakao.maps.Marker({\r\n    position: markerPosition,\r\n    image: markerImage\r\n  });\r\n  // 위치 인스턴스 값을 인수로 전달해서 다시 마커 인스턴스 생성\r\n\r\n  \r\n  useEffect(() => {\r\n    // 지도 인스턴스 최종생성\r\n    const map_instance = new kakao.maps.Map(container.current, option); //지도 인스턴스를 활용해서 마커를 생성하는 코드\r\n    marker.setMap(map_instance);\r\n    setLocation(map_instance);\r\n\r\n    // for(const btn of btns.current.children) btn.classList.remove('on');\r\n    // btns.current.children[Index].classList.add('on');\r\n  }, [Index]); // <-- 기존 컴포넌트가 처음 마운트 되었을 때만 지도를 출력하던 방식에서, Index가 변경될 때 지도가 다시 렌더링 하는 방식으로 바꿈.\r\n\r\n\r\n  // 트래픽 토글 전용 useEffect \r\n  useEffect(() => {\r\n    if(!Location) return;\r\n    // Location state의 값은 두번째 호출부터 값이 담겨 사이클이 돌아가므로 처음 값이 존재하지 않는 초기 오류방지를 위해 조건문 처리함.\r\n\r\n    // 트레픽 값에 따라서 생성과 삭제로 나누어서 코드를 제공, 구현.\r\n    Traffic \r\n    ? Location.addOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC)\r\n    : Location.removeOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC) \r\n\r\n  }, [Traffic]); // traffic state의 값이 변경될 때마다 실행이 되는 구문.\r\n\r\n\r\n  return (\r\n    <Layout name={'Location'}>\r\n      <div id=\"map\" ref={container}></div>\r\n\r\n      <div className=\"btnSet\">\r\n\r\n      {/* 기존의 두개의 버튼에서 한개의 토글 버튼으로 바꿈.\r\n          버튼 클릭시 트래픽 값을 반전처리 => !Traffic\r\n      */}\r\n        <button onClick={() => { setTraffic(!Traffic) }\r\n        }>\r\n          {/* Traffic의 값에 따라서 버튼의 내용도 변경 */}\r\n        { Traffic ? 'Traffic OFF' : 'Traffic ON'}\r\n      </button>\r\n\r\n        <ul className=\"branch\" ref={btns}>\r\n          {/* 각 버튼을 클릭할 때마다 Index의 값을 변경 */}\r\n          {/* <li onClick={() => setIndex(0)}>삼성동 코엑스</li>\r\n          <li onClick={() => setIndex(1)}>올림픽 공원</li>\r\n          <li onClick={() => setIndex(2)}>서울 시청</li> */}\r\n          {\r\n            Info.map((el, idx) => {\r\n              let on = '';\r\n              Index === idx ? (on = 'on') : (on = '');\r\n              return(\r\n                <li key={idx} onClick={() => setIndex(idx)} className={on}>\r\n                  {el.title}\r\n                </li>\r\n              );\r\n            })\r\n          }\r\n        </ul>\r\n      </div>\r\n\r\n\r\n    </Layout>\r\n  );\r\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAOC,MAAM,MAAM,kBAAkB;AAAA;AAErC,eAAe,SAASC,QAAQ,GAAG;EAAA;EAEjC,MAAM;IAAEC;EAAM,CAAC,GAAGC,MAAM;EACxB;EACA;EACA;;EAEA,MAAMC,IAAI,GAAG,CACX;IACEC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE,IAAIJ,KAAK,CAACK,IAAI,CAACC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC;IACpDC,MAAM,EAAG,GAAEC,OAAO,CAACC,GAAG,CAACC,UAAW,kBAAiB;IACnDC,OAAO,EAAE,IAAIX,KAAK,CAACK,IAAI,CAACO,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;IACrCC,MAAM,EAAE;MAAEC,MAAM,EAAE,IAAId,KAAK,CAACK,IAAI,CAACU,KAAK,CAAC,GAAG,EAAE,EAAE;IAAE;EAClD,CAAC,EACD;IACEZ,KAAK,EAAE,QAAQ;IACfC,MAAM,EAAE,IAAIJ,KAAK,CAACK,IAAI,CAACC,MAAM,CAAC,UAAU,EAAE,WAAW,CAAC;IACtDC,MAAM,EAAG,GAAEC,OAAO,CAACC,GAAG,CAACC,UAAW,kBAAiB;IACnDC,OAAO,EAAE,IAAIX,KAAK,CAACK,IAAI,CAACO,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;IACrCC,MAAM,EAAE;MAAEC,MAAM,EAAE,IAAId,KAAK,CAACK,IAAI,CAACU,KAAK,CAAC,GAAG,EAAE,EAAE;IAAE;EAClD,CAAC,EACD;IACEZ,KAAK,EAAE,OAAO;IACdC,MAAM,EAAE,IAAIJ,KAAK,CAACK,IAAI,CAACC,MAAM,CAAC,UAAU,EAAE,WAAW,CAAC;IACtDC,MAAM,EAAG,GAAEC,OAAO,CAACC,GAAG,CAACC,UAAW,kBAAiB;IACnDC,OAAO,EAAE,IAAIX,KAAK,CAACK,IAAI,CAACO,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;IACrCC,MAAM,EAAE;MAAEC,MAAM,EAAE,IAAId,KAAK,CAACK,IAAI,CAACU,KAAK,CAAC,GAAG,EAAE,EAAE;IAAE;EAClD,CAAC,CACF;;EAID;EACA,MAAMC,SAAS,GAAGpB,MAAM,CAAC,IAAI,CAAC;EAC9B;EACA,MAAMqB,IAAI,GAAGrB,MAAM,CAAC,IAAI,CAAC;EAEzB,MAAM,CAACG,QAAQ,EAAEmB,WAAW,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC9C;;EAEA,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC7C;;EAEA,MAAM,CAACwB,IAAI,CAAC,GAAGxB,QAAQ,CAACK,IAAI,CAAC;EAC7B;;EAEA,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC;EACrC;;EAEA,MAAM2B,MAAM,GAAG;IAAE;IACfC,MAAM,EAAEJ,IAAI,CAACC,KAAK,CAAC,CAAClB,MAAM;IAAE;IAC5BsB,KAAK,EAAE,CAAC,CAAC;EACX,CAAC;;EACD,MAAMC,cAAc,GAAIN,IAAI,CAACC,KAAK,CAAC,CAAClB,MAAM,CAAC,CAAC;EAC5C,MAAMwB,QAAQ,GAAGP,IAAI,CAACC,KAAK,CAAC,CAACf,MAAM;EACnC,MAAMsB,SAAS,GAAGR,IAAI,CAACC,KAAK,CAAC,CAACX,OAAO;EACrC,MAAMmB,WAAW,GAAGT,IAAI,CAACC,KAAK,CAAC,CAACT,MAAM;EACtC;;EAEA,MAAMkB,WAAW,GAAG,IAAI/B,KAAK,CAACK,IAAI,CAAC2B,WAAW,CAC5CJ,QAAQ,EACRC,SAAS,EACTC,WAAW,CACZ;EAED,MAAMG,MAAM,GAAG,IAAIjC,KAAK,CAACK,IAAI,CAAC6B,MAAM,CAAC;IACnCC,QAAQ,EAAER,cAAc;IACxBS,KAAK,EAAEL;EACT,CAAC,CAAC;EACF;;EAGApC,SAAS,CAAC,MAAM;IACd;IACA,MAAM0C,YAAY,GAAG,IAAIrC,KAAK,CAACK,IAAI,CAACiC,GAAG,CAACtB,SAAS,CAACuB,OAAO,EAAEf,MAAM,CAAC,CAAC,CAAC;IACpES,MAAM,CAACO,MAAM,CAACH,YAAY,CAAC;IAC3BnB,WAAW,CAACmB,YAAY,CAAC;;IAEzB;IACA;EACF,CAAC,EAAE,CAACf,KAAK,CAAC,CAAC,CAAC,CAAC;;EAGb;EACA3B,SAAS,CAAC,MAAM;IACd,IAAG,CAACI,QAAQ,EAAE;IACd;;IAEA;IACAoB,OAAO,GACLpB,QAAQ,CAAC0C,mBAAmB,CAACzC,KAAK,CAACK,IAAI,CAACqC,SAAS,CAACC,OAAO,CAAC,GAC1D5C,QAAQ,CAAC6C,sBAAsB,CAAC5C,KAAK,CAACK,IAAI,CAACqC,SAAS,CAACC,OAAO,CAAC;EAEjE,CAAC,EAAE,CAACxB,OAAO,CAAC,CAAC,CAAC,CAAC;;EAGf,oBACE,QAAC,MAAM;IAAC,IAAI,EAAE,UAAW;IAAA,wBACvB;MAAK,EAAE,EAAC,KAAK;MAAC,GAAG,EAAEH;IAAU;MAAA;MAAA;MAAA;IAAA,QAAO,eAEpC;MAAK,SAAS,EAAC,QAAQ;MAAA,wBAKrB;QAAQ,OAAO,EAAE,MAAM;UAAEI,UAAU,CAAC,CAACD,OAAO,CAAC;QAAC,CAC7C;QAAA,UAECA,OAAO,GAAG,aAAa,GAAG;MAAY;QAAA;QAAA;QAAA;MAAA,QACjC,eAEP;QAAI,SAAS,EAAC,QAAQ;QAAC,GAAG,EAAEF,IAAK;QAAA,UAM7BI,IAAI,CAACwB,GAAG,CAAC,CAACC,EAAE,EAAEC,GAAG,KAAK;UACpB,IAAIC,EAAE,GAAG,EAAE;UACX1B,KAAK,KAAKyB,GAAG,GAAIC,EAAE,GAAG,IAAI,GAAKA,EAAE,GAAG,EAAG;UACvC,oBACE;YAAc,OAAO,EAAE,MAAMzB,QAAQ,CAACwB,GAAG,CAAE;YAAC,SAAS,EAAEC,EAAG;YAAA,UACvDF,EAAE,CAAC3C;UAAK,GADF4C,GAAG;YAAA;YAAA;YAAA;UAAA,QAEP;QAET,CAAC;MAAC;QAAA;QAAA;QAAA;MAAA,QAED;IAAA;MAAA;MAAA;MAAA;IAAA,QACD;EAAA;IAAA;IAAA;IAAA;EAAA,QAGC;AAEb;AAAC,GAtIuBhD,QAAQ;AAAA,KAARA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module"}