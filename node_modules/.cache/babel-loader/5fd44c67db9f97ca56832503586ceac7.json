{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YS\\\\Desktop\\\\\\uB514\\uCF54\\uB4DC \\uCEF4\\uD4E8\\uD130\\uD559\\uC6D0\\\\221013 17\\uC77C\\uCC28\\\\layout_react\\\\src\\\\components\\\\main\\\\Main.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useRef, useState } from 'react';\n\n// import Header from \"../common/Header\";\n// import News from \"./News\";\n// import Pics from \"./Pics\";\n// import Vids from \"./Vids\";\n// import Visual from \"./Visual\";\n// import Btns from './Btns';\n// import Anime from '../../asset/Anime';\n\n// function Main() {\n\n//   const main = useRef(null);\n//   const pos = useRef([]);\n//   let secs = null;\n\n//   const [Index, setIndex] = useState(0);\n//   const [Scrolled, setScrolled] = useState(0);\n\n//   const getPos = () => {\n//     pos.current = [];\n//     secs = main.current.querySelectorAll('.myScroll');\n//     for (const sec of secs) pos.current.push(sec.offsetTop);\n//     console.log(pos.current);\n//   }\n\n//   const activation = () => {\n//     const base = -window.innerHeight / 2;\n//     const scroll = window.scrollY;\n//     const btns = main.current.querySelectorAll('.scroll_navi li');\n\n//     setScrolled(scroll);\n//     pos.current.map((pos, idx) => {\n//       // 현재 스크롤한 값과 pos의 값을 비교해서\n//       if(scroll >= pos + base) {\n//         for(const btn of btns) btn.classList.remove('on');\n//         for(const sec of secs) sec.classList.remove('on');\n//         btns[idx].classList.add('on');\n//         secs[idx].classList.add('on');\n//       }\n//       // 버튼을 활성화\n//       // 일단 모두 비활성화\n//       // 특정 버튼을 활성\n\n//     });\n//   }\n\n//   useEffect(() => {\n//     getPos();\n//     // 리사이즈 이벤트가 발생하면 스크롤 값을 다시 불러온다.\n//     window.addEventListener('resize', getPos);\n//     window.addEventListener('scroll', activation);\n\n//     return () => {\n//       window.removeEventListener('resize', getPos);\n//       window.removeEventListener('scroll', activation);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     new Anime(window, {\n//       prop: 'scroll',\n//       value: pos.current[Index],\n//       duration: 500,\n//     })\n//   }, [Index]);\n\n//   return(\n//     <main ref={main}>\n//       <Header type={'main'} />\n//       <Visual />\n//       <News />\n//       <Pics Scrolled={Scrolled} start={pos.current[2]} />\n//       <Vids />\n//       <Btns setIndex={setIndex} />\n//     </main>\n//   );\n// }\n\n// export default Main;\n\nimport { useEffect, useRef, useState } from \"react\";\nimport Header from \"../common/Header\";\nimport News from \"./News\";\nimport Pics from \"./Pics\";\nimport Vids from \"./Vids\";\nimport Visual from \"./Visual\";\nimport Btns from \"./Btns\";\nimport Anime from \"../../asset/Anime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Main() {\n  _s();\n  const main = useRef(null);\n  const pos = useRef([]);\n  let secs = null;\n  const [Index, setIndex] = useState(0);\n  const [Scrolled, setScrolled] = useState(0);\n  const getPos = () => {\n    pos.current = [];\n    secs = main.current.querySelectorAll('.myScroll');\n    for (const sec of secs) pos.current.push(sec.offsetTop);\n    console.log(pos.current);\n  };\n  const activation = () => {\n    const base = -window.innerHeight / 2;\n    //const base = 0;\n    const scroll = window.scrollY;\n    const btns = main.current.querySelectorAll('.scroll_navi li');\n    setScrolled(scroll);\n    pos.current.map((pos, idx) => {\n      //현재 스크롤한 값과 pos의 값을 비교해서\n      if (scroll >= pos + base) {\n        for (const btn of btns) btn.classList.remove('on');\n        for (const sec of secs) sec.classList.remove('on');\n        btns[idx].classList.add('on');\n        secs[idx].classList.add('on');\n      }\n      //버튼을 활성화~\n      //일단 모두 비활성화\n      //특정 버튼을 활성\n    });\n  };\n\n  useEffect(() => {\n    getPos();\n    //리사이즈 이벤트가 발생하면 스크롤 값을 다시 불러온다\n    window.addEventListener('resize', getPos);\n    window.addEventListener(\"scroll\", activation);\n    return () => {\n      window.removeEventListener(\"resize\", getPos);\n      window.removeEventListener(\"scroll\", activation);\n    };\n  }, []);\n  useEffect(() => {\n    new Anime(window, {\n      prop: 'scroll',\n      value: pos.current[Index],\n      duration: 500\n    });\n  }, [Index]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    ref: main,\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      type: 'main'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Visual, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(News, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pics, {\n      Scrolled: Scrolled,\n      start: pos.current[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Vids, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Btns, {\n      setIndex: setIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n}\n_s(Main, \"jWoME3Se5i995Qm11Lcn+cu4uno=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["useEffect","useRef","useState","Header","News","Pics","Vids","Visual","Btns","Anime","Main","main","pos","secs","Index","setIndex","Scrolled","setScrolled","getPos","current","querySelectorAll","sec","push","offsetTop","console","log","activation","base","window","innerHeight","scroll","scrollY","btns","map","idx","btn","classList","remove","add","addEventListener","removeEventListener","prop","value","duration"],"sources":["C:/Users/YS/Desktop/디코드 컴퓨터학원/221013 17일차/layout_react/src/components/main/Main.js"],"sourcesContent":["// import { useEffect, useRef, useState } from 'react';\r\n\r\n// import Header from \"../common/Header\";\r\n// import News from \"./News\";\r\n// import Pics from \"./Pics\";\r\n// import Vids from \"./Vids\";\r\n// import Visual from \"./Visual\";\r\n// import Btns from './Btns';\r\n// import Anime from '../../asset/Anime';\r\n\r\n// function Main() {\r\n\r\n//   const main = useRef(null);\r\n//   const pos = useRef([]);\r\n//   let secs = null;\r\n\r\n//   const [Index, setIndex] = useState(0);\r\n//   const [Scrolled, setScrolled] = useState(0);\r\n\r\n//   const getPos = () => {\r\n//     pos.current = [];\r\n//     secs = main.current.querySelectorAll('.myScroll');\r\n//     for (const sec of secs) pos.current.push(sec.offsetTop);\r\n//     console.log(pos.current);\r\n//   }\r\n\r\n//   const activation = () => {\r\n//     const base = -window.innerHeight / 2;\r\n//     const scroll = window.scrollY;\r\n//     const btns = main.current.querySelectorAll('.scroll_navi li');\r\n\r\n//     setScrolled(scroll);\r\n//     pos.current.map((pos, idx) => {\r\n//       // 현재 스크롤한 값과 pos의 값을 비교해서\r\n//       if(scroll >= pos + base) {\r\n//         for(const btn of btns) btn.classList.remove('on');\r\n//         for(const sec of secs) sec.classList.remove('on');\r\n//         btns[idx].classList.add('on');\r\n//         secs[idx].classList.add('on');\r\n//       }\r\n//       // 버튼을 활성화\r\n//       // 일단 모두 비활성화\r\n//       // 특정 버튼을 활성\r\n\r\n//     });\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     getPos();\r\n//     // 리사이즈 이벤트가 발생하면 스크롤 값을 다시 불러온다.\r\n//     window.addEventListener('resize', getPos);\r\n//     window.addEventListener('scroll', activation);\r\n\r\n//     return () => {\r\n//       window.removeEventListener('resize', getPos);\r\n//       window.removeEventListener('scroll', activation);\r\n//     }\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     new Anime(window, {\r\n//       prop: 'scroll',\r\n//       value: pos.current[Index],\r\n//       duration: 500,\r\n//     })\r\n//   }, [Index]);\r\n\r\n\r\n//   return(\r\n//     <main ref={main}>\r\n//       <Header type={'main'} />\r\n//       <Visual />\r\n//       <News />\r\n//       <Pics Scrolled={Scrolled} start={pos.current[2]} />\r\n//       <Vids />\r\n//       <Btns setIndex={setIndex} />\r\n//     </main>\r\n//   );\r\n// }\r\n\r\n// export default Main;\r\n\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport Header from \"../common/Header\";\r\nimport News from \"./News\";\r\nimport Pics from \"./Pics\";\r\nimport Vids from \"./Vids\";\r\nimport Visual from \"./Visual\";\r\nimport Btns from \"./Btns\";\r\nimport Anime from \"../../asset/Anime\";\r\n\r\nfunction Main() {\r\n    const main = useRef(null);\r\n    const pos = useRef([]);\r\n    let secs = null;\r\n    const [Index, setIndex] = useState(0);\r\n    const [Scrolled, setScrolled] = useState(0);\r\n\r\n    const getPos = () => {\r\n        pos.current = [];\r\n        secs = main.current.querySelectorAll('.myScroll');\r\n        for (const sec of secs) pos.current.push(sec.offsetTop);\r\n        console.log(pos.current);\r\n    }\r\n\r\n    const activation = () => {\r\n        const base = -window.innerHeight / 2;\r\n        //const base = 0;\r\n        const scroll = window.scrollY;\r\n        const btns = main.current.querySelectorAll('.scroll_navi li');\r\n\r\n        setScrolled(scroll);\r\n        pos.current.map((pos, idx) => {\r\n            //현재 스크롤한 값과 pos의 값을 비교해서\r\n            if (scroll >= pos + base) {\r\n                for (const btn of btns) btn.classList.remove('on');\r\n                for (const sec of secs) sec.classList.remove('on');\r\n                btns[idx].classList.add('on');\r\n                secs[idx].classList.add('on');\r\n\r\n            }\r\n            //버튼을 활성화~\r\n            //일단 모두 비활성화\r\n            //특정 버튼을 활성\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPos();\r\n        //리사이즈 이벤트가 발생하면 스크롤 값을 다시 불러온다\r\n        window.addEventListener('resize', getPos);\r\n        window.addEventListener(\"scroll\", activation);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", getPos);\r\n            window.removeEventListener(\"scroll\", activation);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        new Anime(window, {\r\n            prop: 'scroll',\r\n            value: pos.current[Index],\r\n            duration: 500,\r\n        });\r\n    }, [Index]);\r\n\r\n\r\n    return (\r\n        <main ref={main}>\r\n            <Header type={'main'} />\r\n            <Visual />\r\n            <News />\r\n            <Pics Scrolled={Scrolled} start={pos.current[2]} />\r\n            <Vids />\r\n            <Btns setIndex={setIndex} />\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module"}